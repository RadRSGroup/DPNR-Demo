import React, { useState, useEffect } from 'react';import {   Box,   Stepper,   Step,   StepLabel,   Typography,   Button,   Paper,   Radio,   RadioGroup,   FormControlLabel,   FormControl,   FormLabel,  CircularProgress,  Grid,  Chip} from '@mui/material';import { styled } from '@mui/material/styles';import FileUpload from '../components/FileUpload';// Styled components for better UI presentationconst AssessmentContainer = styled(Paper)(({ theme }) => ({  padding: theme.spacing(4),  marginTop: theme.spacing(3),  marginBottom: theme.spacing(3),}));const QuestionCard = styled(Paper)(({ theme }) => ({  padding: theme.spacing(3),  marginTop: theme.spacing(2),  marginBottom: theme.spacing(2),}));const AssessmentUI = () => {  // States for managing the assessment flow  const [activeStep, setActiveStep] = useState(0);  const [assessmentType, setAssessmentType] = useState('questionnaire'); // 'questionnaire' or 'text-analysis'  const [responses, setResponses] = useState({});  const [uploadedText, setUploadedText] = useState('');  const [isAnalyzing, setIsAnalyzing] = useState(false);  const [results, setResults] = useState(null);    // Sample assessment steps  const steps = [    'Choose Assessment Method',    'Complete Assessment',    'Review Results'  ];    // Sample questions for the questionnaire approach  const questions = [    {      id: 'qQ101',      phase: 'initial-segmentation',      text: 'When faced with a difficult decision, I typically:',      options: [        { id: 'A101', text: 'Take time to analyze all possible outcomes before deciding', persona: 'observer' },        { id: 'A102', text: 'Consider how it will impact others before myself', persona: 'giver' },        { id: 'A103', text: 'Look for the most efficient and successful solution', persona: 'driver' },        { id: 'A104', text: 'Trust my gut feeling about what feels most authentic', persona: 'seeker' },        { id: 'A105', text: 'Make sure I'm following the right procedures and standards', persona: 'upholder' },        { id: 'A106', text: 'Consider all risks and prepare for potential problems', persona: 'guardian' },        { id: 'A107', text: 'Look for the most exciting and positive option', persona: 'explorer' },        { id: 'A108', text: 'Assert my position and take control of the situation', persona: 'protector' },        { id: 'A109', text: 'Find a compromise that keeps everyone happy', persona: 'harmonizer' }      ]    },    {      id: 'qQ102',      phase: 'initial-segmentation',      text: 'The thing that bothers me most in life is:',      options: [        { id: 'A110', text: 'Being overwhelmed with too many demands or expectations', persona: 'observer' },        { id: 'A111', text: 'Feeling like my contributions aren't appreciated', persona: 'giver' },        { id: 'A112', text: 'Not achieving my goals or living up to my potential', persona: 'driver' },        { id: 'A113', text: 'Feeling misunderstood or having to be inauthentic', persona: 'seeker' },        { id: 'A114', text: 'Seeing things done incorrectly or without proper standards', persona: 'upholder' },        { id: 'A115', text: 'Uncertainty or not being prepared for what might happen', persona: 'guardian' },        { id: 'A116', text: 'Being restricted or missing out on opportunities', persona: 'explorer' },        { id: 'A117', text: 'Being controlled or having my autonomy threatened', persona: 'protector' },        { id: 'A118', text: 'Conflict or discord in my relationships', persona: 'harmonizer' }      ]    },    {      id: 'qQ201',      phase: 'detailed-differentiation',      text: 'In my relationships, I tend to:',      options: [        { id: 'A201', text: 'Need personal space and time to process my thoughts', persona: 'observer' },        { id: 'A202', text: 'Focus on others' needs and how I can support them', persona: 'giver' },        { id: 'A203', text: 'Be goal-oriented and sometimes struggle with vulnerability', persona: 'driver' },        { id: 'A204', text: 'Seek deep emotional connection and authentic exchange', persona: 'seeker' },        { id: 'A205', text: 'Have high expectations and notice when things aren't right', persona: 'upholder' },        { id: 'A206', text: 'Be loyal but cautious about trusting too quickly', persona: 'guardian' },        { id: 'A207', text: 'Bring energy and fun but may avoid serious issues', persona: 'explorer' },        { id: 'A208', text: 'Be protective and direct, but sometimes intimidating', persona: 'protector' },        { id: 'A209', text: 'Be accommodating and avoid creating conflict', persona: 'harmonizer' }      ]    },    // Add more questions as needed  ];    // Current question to display (based on step)  const getCurrentQuestions = () => {    if (activeStep === 1 && assessmentType === 'questionnaire') {      // For questionnaire approach, show questions based on some logic      // This could be expanded to show different questions based on previous responses      return questions;    }    return [];  };    // Handle question responses  const handleResponseChange = (questionId, answerId) => {    setResponses({      ...responses,      [questionId]: [answerId] // Using array to support multiple selections in the future    });  };    // Handle file upload complete   const handleTextAnalysisComplete = (data) => {    if (data.text) {      setUploadedText(data.text);    }  };    // Submit for analysis  const submitForAnalysis = async () => {    setIsAnalyzing(true);    try {      // If using questionnaire approach      if (assessmentType === 'questionnaire') {        // Process questionnaire responses        const result = await fetch('/api/analyze-assessment', {          method: 'POST',          headers: {            'Content-Type': 'application/json',          },          body: JSON.stringify({ responses }),        });        const data = await result.json();        setResults(data);      }       // If using text analysis approach      else if (assessmentType === 'text-analysis' && uploadedText) {        // Process free text for persona analysis        const result = await fetch('/api/analyze-text', {          method: 'POST',          headers: {            'Content-Type': 'application/json',          },          body: JSON.stringify({             text: uploadedText,            assessmentType: 'persona'          }),        });        const data = await result.json();        setResults(data);      }    } catch (error) {      console.error('Analysis error:', error);    } finally {      setIsAnalyzing(false);    }  };    // Navigation handlers  const handleNext = () => {    if (activeStep === 1) {      submitForAnalysis();    }    setActiveStep((prevStep) => prevStep + 1);  };    const handleBack = () => {    setActiveStep((prevStep) => prevStep - 1);  };  // Render results view  const renderResults = () => {    if (!results) return <CircularProgress />;        return (      <Box sx={{ mt: 4 }}>        <Typography variant="h4" gutterBottom>          Your Emotional Persona Assessment Results        </Typography>                <Box sx={{ mt: 3 }}>          <Typography variant="h5" gutterBottom>            Primary Persona: {results.primaryPersona.name}          </Typography>          <Typography variant="body1" paragraph>            {results.primaryPersona.description}          </Typography>        </Box>                {results.secondaryPersonas?.length > 0 && (          <Box sx={{ mt: 3 }}>            <Typography variant="h5" gutterBottom>              Secondary Personas            </Typography>            <Grid container spacing={2}>              {results.secondaryPersonas.map(persona => (                <Grid item key={persona.name}>                  <Chip                     label={persona.name}                     color="primary"                     variant="outlined"                    sx={{ mr: 1 }}                  />                </Grid>              ))}            </Grid>          </Box>        )}                <Box sx={{ mt: 3 }}>          <Typography variant="h5" gutterBottom>            Core Values          </Typography>          <Grid container spacing={1}>            {results.coreValues.map(value => (              <Grid item key={value}>                <Chip label={value} color="secondary" sx={{ mr: 1 }} />              </Grid>            ))}          </Grid>        </Box>                <Box sx={{ mt: 3 }}>          <Typography variant="h5" gutterBottom>            Life Domain Impact          </Typography>          {Object.entries(results.lifeDomains).map(([domain, impact]) => (            <Box key={domain} sx={{ mb: 2 }}>              <Typography variant="h6">{domain}</Typography>              <Typography variant="body1">{impact}</Typography>            </Box>          ))}        </Box>      </Box>    );  };  // Render the assessment step content  const getStepContent = (step) => {    switch (step) {      case 0:        return (          <Box sx={{ mt: 2 }}>            <Typography variant="h5" gutterBottom>              Choose Your Assessment Method            </Typography>            <FormControl component="fieldset">              <RadioGroup                value={assessmentType}                onChange={(e) => setAssessmentType(e.target.value)}              >                <FormControlLabel                   value="questionnaire"                   control={<Radio />}                   label="Guided Questionnaire (5-10 minutes)"                 />                <FormControlLabel                   value="text-analysis"                   control={<Radio />}                   label="Text Analysis (Share your thoughts or upload content)"                 />              </RadioGroup>            </FormControl>          </Box>        );      case 1:        return assessmentType === 'questionnaire' ? (          <Box>            <Typography variant="h5" gutterBottom>              Complete the Assessment            </Typography>            {getCurrentQuestions().map((question, index) => (              <QuestionCard key={question.id} elevation={2}>                <Typography variant="h6" gutterBottom>                  {index + 1}. {question.text}                </Typography>                <FormControl component="fieldset" sx={{ width: '100%' }}>                  <RadioGroup                    value={responses[question.id]?.[0] || ''}                    onChange={(e) => handleResponseChange(question.id, e.target.value)}                  >                    {question.options.map(option => (                      <FormControlLabel                        key={option.id}                        value={option.id}                        control={<Radio />}                        label={option.text}                      />                    ))}                  </RadioGroup>                </FormControl>              </QuestionCard>            ))}          </Box>        ) : (          <Box>            <Typography variant="h5" gutterBottom>              Share Your Thoughts            </Typography>            <Typography variant="body1" paragraph>              Upload a text file, audio recording, or video where you discuss your thoughts,               challenges, goals, or experiences. Our system will analyze your content to identify your               emotional personas, core values, and life domain insights.            </Typography>            <FileUpload               onTranscriptionComplete={handleTextAnalysisComplete}               onError={(error) => console.error(error)}              prompt="Analyze this content to identify emotional personas, values, needs, and life domains"               model="llama2"            />            {uploadedText && (              <Box sx={{ mt: 2 }}>                <Typography variant="body2" color="text.secondary">                  Text extracted successfully! ({uploadedText.length} characters)                </Typography>              </Box>            )}          </Box>        );      case 2:        return (          <Box>            {isAnalyzing ? (              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 4 }}>                <CircularProgress />                <Typography variant="h6" sx={{ mt: 2 }}>                  Analyzing your responses...                </Typography>              </Box>            ) : (              renderResults()            )}          </Box>        );      default:        return 'Unknown step';    }  };  return (    <AssessmentContainer>      <Typography variant="h4" align="center" gutterBottom>        Emotional Persona Assessment      </Typography>      <Typography variant="body1" align="center" paragraph>        Discover your emotional personas, core values, and how they impact different life domains.      </Typography>            <Stepper activeStep={activeStep} sx={{ mt: 3, mb: 4 }}>        {steps.map((label) => (          <Step key={label}>            <StepLabel>{label}</StepLabel>          </Step>        ))}      </Stepper>            <Box>        {getStepContent(activeStep)}        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>          <Button            disabled={activeStep === 0}            onClick={handleBack}            variant="outlined"          >            Back          </Button>          <Button            variant="contained"            color="primary"            onClick={handleNext}            disabled={              (activeStep === 1 &&                ((assessmentType === 'questionnaire' && Object.keys(responses).length < getCurrentQuestions().length) ||                (assessmentType === 'text-analysis' && !uploadedText))) ||              isAnalyzing            }          >            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}          </Button>        </Box>      </Box>    </AssessmentContainer>  );};export default AssessmentUI;