"""
IFS (Internal Family Systems) Agent for DPNR Platform
Generated by TherapeuticAgentBuilder
Generated: 2025-07-21 20:46:42.240752
"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from pydantic import BaseModel, Field, validator
from enum import Enum

from ...core.base_agent import BaseAgent, AgentMessage, AgentResponse, AgentCapability
from ...core.message_types import MessageType, PersonalityScore


class IFSPartType(str, Enum):
    """Types of parts in IFS model"""
    MANAGER = "manager"
    FIREFIGHTER = "firefighter" 
    EXILE = "exile"
    SELF = "self"


class IFSPart(BaseModel):
    """Represents an identified IFS part"""
    part_id: str
    part_type: IFSPartType
    name: Optional[str] = None
    role: str
    emotions: List[str]
    beliefs: List[str]
    protective_intention: Optional[str] = None
    age_of_origin: Optional[str] = None
    confidence: float = Field(ge=0.0, le=1.0)


class DialogueResponse(BaseModel):
    """Response from parts dialogue"""
    part_response: str
    emotional_tone: str
    suggested_questions: List[str]
    unburdening_readiness: float = Field(ge=0.0, le=1.0)
    therapeutic_notes: Optional[str] = None


class IFSAgent(BaseAgent):
    """
    Internal Family Systems therapy agent for parts work
    Identifies and facilitates dialogue with internal parts
    """
    
    def __init__(self):
        super().__init__(
            agent_id="ifs-agent",
            name="IFS Therapy Agent",
            version="1.0.0"
        )
        self.logger = logging.getLogger(__name__)
        self.active_sessions: Dict[str, Dict[str, Any]] = {}
        
    async def initialize(self) -> bool:
        """Initialize IFS agent"""
        try:
            self.logger.info("Initializing IFS Agent")
            self._capabilities = [
                AgentCapability(
                    name="identify_parts",
                    description="Identify IFS parts from user text",
                    input_schema={"text": "string", "context": "object"},
                    output_schema={"parts": "array"}
                ),
                AgentCapability(
                    name="facilitate_dialogue", 
                    description="Facilitate dialogue with identified parts",
                    input_schema={"part_id": "string", "message": "string"},
                    output_schema={"response": "object"}
                ),
                AgentCapability(
                    name="assess_readiness",
                    description="Assess unburdening readiness",
                    input_schema={"part": "object", "history": "array"},
                    output_schema={"readiness": "number"}
                )
            ]
            return True
        except Exception as e:
            self.logger.error(f"Failed to initialize: {e}")
            return False
    
    def get_capabilities(self) -> List[AgentCapability]:
        """Return agent capabilities"""
        return self._capabilities
    
    async def validate_input(self, data: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate input data"""
        required_fields = {"action", "data"}
        if not all(field in data for field in required_fields):
            return False, f"Missing required fields: {required_fields}"
        
        action = data.get("action")
        if action not in ["identify_parts", "facilitate_dialogue", "assess_readiness"]:
            return False, f"Unknown action: {action}"
            
        return True, None
    
    async def process(self, message: AgentMessage) -> AgentResponse:
        """Process IFS therapy request"""
        start_time = datetime.utcnow()
        
        try:
            action = message.payload.get("action")
            data = message.payload.get("data", {})
            
            if action == "identify_parts":
                parts = await self.identify_parts(
                    data.get("text", ""),
                    data.get("context")
                )
                result = {"parts": [p.dict() for p in parts]}
                
            elif action == "facilitate_dialogue":
                response = await self.facilitate_dialogue(
                    data.get("part_id"),
                    data.get("message"),
                    data.get("session_context")
                )
                result = response.dict()
                
            elif action == "assess_readiness":
                readiness = await self.assess_unburdening_readiness(
                    IFSPart(**data.get("part", {})),
                    data.get("dialogue_history", [])
                )
                result = {"readiness": readiness}
                
            else:
                raise ValueError(f"Unknown action: {action}")
            
            return AgentResponse(
                success=True,
                data=result,
                processing_time=(datetime.utcnow() - start_time).total_seconds(),
                agent_id=self.agent_id,
                confidence=0.85
            )
            
        except Exception as e:
            self.logger.error(f"Processing failed: {e}")
            return AgentResponse(
                success=False,
                error=str(e),
                processing_time=(datetime.utcnow() - start_time).total_seconds(),
                agent_id=self.agent_id
            )
    
    async def identify_parts(self, text: str, context: Optional[Dict[str, Any]] = None) -> List[IFSPart]:
        """Identify IFS parts from user text"""
        parts = []
        
        # Therapeutic patterns for part identification
        manager_patterns = [
            "should", "must", "have to", "need to", "supposed to",
            "perfect", "control", "plan", "organize", "achieve"
        ]
        
        firefighter_patterns = [
            "escape", "avoid", "numb", "distract", "angry",
            "shut down", "push away", "fight", "rebel", "act out"
        ]
        
        exile_patterns = [
            "hurt", "scared", "alone", "abandoned", "shame",
            "not good enough", "unlovable", "helpless", "small", "young"
        ]
        
        text_lower = text.lower()
        
        # Manager part detection
        if any(pattern in text_lower for pattern in manager_patterns):
            parts.append(IFSPart(
                part_id=f"manager_{len(parts)+1}",
                part_type=IFSPartType.MANAGER,
                role="Protecting system through control and planning",
                emotions=["anxious", "determined"],
                beliefs=["I must keep things under control"],
                protective_intention="Prevent overwhelm and maintain safety",
                confidence=0.85
            ))
        
        # Firefighter part detection
        if any(pattern in text_lower for pattern in firefighter_patterns):
            parts.append(IFSPart(
                part_id=f"firefighter_{len(parts)+1}",
                part_type=IFSPartType.FIREFIGHTER,
                role="Emergency protection through immediate action",
                emotions=["reactive", "protective"],
                beliefs=["I must act now to stop the pain"],
                protective_intention="Immediately stop emotional pain",
                confidence=0.85
            ))
            
        # Exile part detection
        if any(pattern in text_lower for pattern in exile_patterns):
            parts.append(IFSPart(
                part_id=f"exile_{len(parts)+1}",
                part_type=IFSPartType.EXILE,
                role="Holding vulnerable emotions and memories",
                emotions=["hurt", "vulnerable"],
                beliefs=["I am not safe", "I am alone"],
                age_of_origin="childhood",
                confidence=0.85
            ))
        
        # If no parts identified, suggest exploration
        if not parts:
            parts.append(IFSPart(
                part_id="exploration_needed",
                part_type=IFSPartType.SELF,
                role="Further exploration needed",
                emotions=["curious"],
                beliefs=["There may be parts not yet visible"],
                confidence=0.6
            ))
            
        return parts
    
    async def facilitate_dialogue(self, part_id: str, message: str, 
                                session_context: Optional[Dict[str, Any]] = None) -> DialogueResponse:
        """Facilitate dialogue with an identified part"""
        
        response_templates = {
            IFSPartType.MANAGER: {
                "greeting": "I hear that you are working hard to keep things organized and under control.",
                "questions": [
                    "What are you most worried might happen if you were not here?",
                    "How long have you been protecting the system this way?",
                    "What would you need to feel safe enough to relax a little?"
                ]
            },
            IFSPartType.FIREFIGHTER: {
                "greeting": "I can see you jump into action when things feel overwhelming.",
                "questions": [
                    "What signals tell you it is time to take action?",
                    "What are you protecting the system from?",
                    "What helps you feel like the emergency is over?"
                ]
            },
            IFSPartType.EXILE: {
                "greeting": "I see you are holding some really difficult feelings.",
                "questions": [
                    "How long have you been carrying these feelings?",
                    "What do you most need others to understand?",
                    "What would help you feel less alone?"
                ]
            }
        }
        
        part_type = session_context.get("part_type", IFSPartType.SELF) if session_context else IFSPartType.SELF
        templates = response_templates.get(part_type, response_templates[IFSPartType.MANAGER])
        
        return DialogueResponse(
            part_response=templates["greeting"],
            emotional_tone="compassionate",
            suggested_questions=templates["questions"],
            unburdening_readiness=0.3,
            therapeutic_notes="Initial dialogue established. Continue building trust with this part."
        )
    
    async def assess_unburdening_readiness(self, part: IFSPart, 
                                         dialogue_history: List[Dict[str, Any]]) -> float:
        """Assess if a part is ready for unburdening process"""
        
        readiness_factors = {
            "dialogue_count": len(dialogue_history),
            "trust_established": len(dialogue_history) >= 3,
            "part_type": part.part_type,
            "self_awareness": any("understand" in str(d).lower() for d in dialogue_history),
            "safety_expressed": any("safe" in str(d).lower() for d in dialogue_history)
        }
        
        score = 0.0
        score += min(readiness_factors["dialogue_count"] * 0.1, 0.3)
        
        if readiness_factors["trust_established"]:
            score += 0.2
            
        if part.part_type == IFSPartType.EXILE:
            score *= 0.8
        elif part.part_type == IFSPartType.MANAGER:
            score *= 0.9
            
        if readiness_factors["self_awareness"]:
            score += 0.2
            
        if readiness_factors["safety_expressed"]:
            score += 0.3
            
        return min(score, 1.0)
