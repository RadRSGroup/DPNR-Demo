"""
Shadow Work Agent for DPNR Platform
Generated by TherapeuticAgentBuilder (Phase 3)
Generated: 2025-07-21 20:54:31.155072

This agent provides shadow work analysis based on Jungian psychology,
helping users identify and integrate unconscious patterns and projections.
"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from pydantic import BaseModel, Field, validator
from enum import Enum

from ...core.base_agent import BaseAgent, AgentMessage, AgentResponse, AgentCapability
from ...core.message_types import MessageType, PersonalityScore


class ShadowPatternType(str, Enum):
    """Types of shadow patterns"""
    PROJECTION = "projection"
    REPRESSION = "repression"
    DENIAL = "denial"
    COMPENSATION = "compensation"


class ShadowPattern(BaseModel):
    """Represents an identified shadow pattern"""
    pattern_id: str
    pattern_type: ShadowPatternType
    trigger: str
    projection_target: Optional[str] = None
    unconscious_content: str
    emotional_charge: float = Field(ge=0.0, le=1.0)
    integration_readiness: float = Field(ge=0.0, le=1.0)
    confidence: float = Field(ge=0.0, le=1.0)


class IntegrationGuidance(BaseModel):
    """Guidance for shadow integration"""
    integration_steps: List[str]
    reflection_questions: List[str]
    warning_signs: List[str]
    integration_timeline: str
    support_needed: str


class ShadowWorkAgent(BaseAgent):
    """
    Shadow Work therapy agent for unconscious pattern recognition
    Identifies projections, repressions, and integration opportunities
    """
    
    def __init__(self):
        super().__init__(
            agent_id="shadow-work-agent",
            name="Shadow Work Therapy Agent",
            version="1.0.0"
        )
        self.logger = logging.getLogger(__name__)
        self.active_sessions: Dict[str, Dict[str, Any]] = {}
        
    async def initialize(self) -> bool:
        """Initialize Shadow Work agent"""
        try:
            self.logger.info("Initializing Shadow Work Agent")
            self._capabilities = [
                AgentCapability(
                    name="detect_shadow_patterns",
                    description="Detect shadow patterns from user text and history",
                    input_schema={"text": "string", "history": "array"},
                    output_schema={"patterns": "array"}
                ),
                AgentCapability(
                    name="analyze_projections",
                    description="Analyze psychological projections",
                    input_schema={"pattern": "object", "context": "object"},
                    output_schema={"analysis": "object"}
                ),
                AgentCapability(
                    name="generate_integration_guidance",
                    description="Generate shadow integration guidance",
                    input_schema={"pattern": "object", "readiness": "number"},
                    output_schema={"guidance": "object"}
                )
            ]
            return True
        except Exception as e:
            self.logger.error(f"Failed to initialize: {e}")
            return False
    
    def get_capabilities(self) -> List[AgentCapability]:
        """Return agent capabilities"""
        return self._capabilities
    
    async def validate_input(self, data: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate input data"""
        required_fields = {"action", "data"}
        if not all(field in data for field in required_fields):
            return False, f"Missing required fields: {required_fields}"
        
        action = data.get("action")
        if action not in ["detect_shadow_patterns", "analyze_projections", "generate_integration_guidance"]:
            return False, f"Unknown action: {action}"
            
        return True, None
    
    async def process(self, message: AgentMessage) -> AgentResponse:
        """Process shadow work request"""
        start_time = datetime.utcnow()
        
        try:
            action = message.payload.get("action")
            data = message.payload.get("data", {})
            
            if action == "detect_shadow_patterns":
                patterns = await self.detect_shadow_patterns(
                    data.get("text", ""),
                    data.get("history", [])
                )
                result = {"patterns": [p.dict() for p in patterns]}
                
            elif action == "analyze_projections":
                analysis = await self.analyze_projections(
                    ShadowPattern(**data.get("pattern", {})),
                    data.get("context", {})
                )
                result = {"analysis": analysis}
                
            elif action == "generate_integration_guidance":
                guidance = await self.generate_integration_guidance(
                    ShadowPattern(**data.get("pattern", {})),
                    data.get("readiness", 0.0)
                )
                result = {"guidance": guidance.dict()}
                
            else:
                raise ValueError(f"Unknown action: {action}")
            
            return AgentResponse(
                success=True,
                data=result,
                processing_time=(datetime.utcnow() - start_time).total_seconds(),
                agent_id=self.agent_id,
                confidence=0.85
            )
            
        except Exception as e:
            self.logger.error(f"Processing failed: {e}")
            return AgentResponse(
                success=False,
                error=str(e),
                processing_time=(datetime.utcnow() - start_time).total_seconds(),
                agent_id=self.agent_id
            )
    
    async def detect_shadow_patterns(self, text: str, history: List[str]) -> List[ShadowPattern]:
        """Detect shadow patterns from text and behavioral history"""
        patterns = []
        
        # Jungian shadow work patterns
        projection_patterns = [
            "they always", "people are", "everyone is", "nobody understands",
            "all men", "all women", "typical", "just like", "reminds me of"
        ]
        
        repression_patterns = [
            "i never", "i would never", "i'm not", "i don't do", "that's not me",
            "i'm above", "i'm different", "i hate when", "disgusts me"
        ]
        
        denial_patterns = [
            "i'm fine", "no big deal", "doesn't bother me", "over it",
            "moved on", "not affected", "stronger than that"
        ]
        
        compensation_patterns = [
            "i have to be", "must prove", "show them", "better than",
            "perfect", "superior", "special", "chosen"
        ]
        
        text_lower = text.lower()
        
        # Projection detection
        if any(pattern in text_lower for pattern in projection_patterns):
            patterns.append(ShadowPattern(
                pattern_id=f"projection_{len(patterns)+1}",
                pattern_type=ShadowPatternType.PROJECTION,
                trigger="External judgment or criticism",
                projection_target="Others",
                unconscious_content="Disowned aspects of self",
                emotional_charge=0.8,
                integration_readiness=0.4,
                confidence=0.85
            ))
        
        # Repression detection
        if any(pattern in text_lower for pattern in repression_patterns):
            patterns.append(ShadowPattern(
                pattern_id=f"repression_{len(patterns)+1}",
                pattern_type=ShadowPatternType.REPRESSION,
                trigger="Threat to self-image",
                unconscious_content="Rejected personality aspects",
                emotional_charge=0.7,
                integration_readiness=0.3,
                confidence=0.85
            ))
        
        # Denial detection
        if any(pattern in text_lower for pattern in denial_patterns):
            patterns.append(ShadowPattern(
                pattern_id=f"denial_{len(patterns)+1}",
                pattern_type=ShadowPatternType.DENIAL,
                trigger="Emotional overwhelm",
                unconscious_content="Avoided emotional reality",
                emotional_charge=0.6,
                integration_readiness=0.2,
                confidence=0.85
            ))
            
        # Compensation detection
        if any(pattern in text_lower for pattern in compensation_patterns):
            patterns.append(ShadowPattern(
                pattern_id=f"compensation_{len(patterns)+1}",
                pattern_type=ShadowPatternType.COMPENSATION,
                trigger="Inferiority feelings",
                unconscious_content="Hidden inadequacy fears",
                emotional_charge=0.9,
                integration_readiness=0.5,
                confidence=0.85
            ))
        
        # Default exploration pattern
        if not patterns:
            patterns.append(ShadowPattern(
                pattern_id="exploration_needed",
                pattern_type=ShadowPatternType.PROJECTION,
                trigger="Unknown",
                unconscious_content="Shadow content not yet accessible",
                emotional_charge=0.3,
                integration_readiness=0.1,
                confidence=0.5
            ))
            
        return patterns
    
    async def analyze_projections(self, pattern: ShadowPattern, context: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze psychological projections in detail"""
        
        analysis = {
            "projection_mechanism": "Unconscious attribution of own traits to others",
            "emotional_function": "Protection from unwanted self-knowledge",
            "trigger_analysis": f"Activated by: {pattern.trigger}",
            "integration_opportunity": "Recognition and reclaiming of projected content",
            "therapeutic_focus": "Awareness building without shame",
            "warning_signs": [
                "Strong emotional reactions to specific people",
                "Repetitive judgments about others", 
                "Feeling victimized by others' behavior",
                "Inability to see positive in criticized traits"
            ],
            "integration_benefits": [
                "Increased self-awareness",
                "Reduced emotional reactivity",
                "Improved relationships",
                "Personal wholeness and integration"
            ]
        }
        
        return analysis
    
    async def generate_integration_guidance(self, pattern: ShadowPattern, readiness: float) -> IntegrationGuidance:
        """Generate guidance for shadow integration work"""
        
        if readiness < 0.3:
            steps = [
                "Build emotional safety and self-compassion",
                "Notice patterns without judgment",
                "Develop distress tolerance skills",
                "Work with qualified therapist"
            ]
            questions = [
                "What makes this pattern feel threatening?",
                "When do I feel safest to explore difficult emotions?",
                "What support do I need for this inner work?"
            ]
            timeline = "6-12 months of preparation work needed"
            
        elif readiness < 0.6:
            steps = [
                "Acknowledge the pattern with curiosity",
                "Explore childhood origins with compassion", 
                "Practice owning projections in low-stakes situations",
                "Journal about integration experiences"
            ]
            questions = [
                "How might this rejected part actually serve me?",
                "What would change if I accepted this aspect of myself?",
                "How can I honor both my light and shadow?"
            ]
            timeline = "3-6 months of gradual integration work"
            
        else:
            steps = [
                "Actively reclaim projected content",
                "Practice expressing integrated shadow in healthy ways",
                "Use shadow energy for personal growth and creativity",
                "Share integration insights with trusted others"
            ]
            questions = [
                "How can I use this shadow energy constructively?",
                "What gifts are hidden in this rejected part?",
                "How does integration serve my authentic self?"
            ]
            timeline = "1-3 months of active integration practice"
        
        return IntegrationGuidance(
            integration_steps=steps,
            reflection_questions=questions,
            warning_signs=[
                "Overwhelming shame or self-criticism",
                "Spiritual bypassing or premature forgiveness",
                "Acting out shadow content destructively",
                "Losing touch with healthy boundaries"
            ],
            integration_timeline=timeline,
            support_needed="Qualified shadow work therapist or experienced guide recommended"
        )
