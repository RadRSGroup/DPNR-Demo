# Consolidated Docker Compose Configuration
# Usage:
#   Minimal deployment: docker-compose up
#   Full deployment: docker-compose --profile full up
#   Development mode: docker-compose --profile dev up
#   Production mode: docker-compose --profile prod up

services:
  # Core Service - Always runs
  agent-system:
    build:
      context: .
      dockerfile: Dockerfile
    image: agent-library:latest
    container_name: agent-library
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AGENT_MODE=${AGENT_MODE:-production}
      - REDIS_URL=redis://redis:6379
      - ENABLE_METRICS=${ENABLE_METRICS:-false}
    volumes:
      # Mount source code for development (optional)
      - ./run_production.py:/app/run_production.py:ro
      - ./run_minimal.py:/app/run_minimal.py:ro
      - ./frontend_api_server.py:/app/frontend_api_server.py:ro
      - ./comprehensive_assessment_system.py:/app/comprehensive_assessment_system.py:ro
      - ./agent_library:/app/agent_library:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    # Optional dependency on Redis when using cache profile
    # depends_on:
    #   redis:
    #     condition: service_healthy

  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles: ["cache", "full", "dev", "prod"]

  # Agent Services (Full deployment)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: agent-rabbitmq
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-agent}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-agent123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["messaging", "full", "prod"]

  translation-agent:
    build:
      context: .
      dockerfile: docker/agents/translation.Dockerfile
    container_name: translation-agent
    ports:
      - "8001:8001"
    environment:
      - AGENT_ID=translation_agent_1
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-agent}:${RABBITMQ_PASS:-agent123}@rabbitmq:5672
      - SUPPORTED_LANGUAGES=en,he,ar,es,fr,de,ru
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["agents", "full", "prod"]

  nlp-analyzer:
    build:
      context: .
      dockerfile: docker/agents/nlp.Dockerfile
    container_name: nlp-analyzer
    ports:
      - "8002:8002"
    environment:
      - AGENT_ID=nlp_analyzer_1
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-agent}:${RABBITMQ_PASS:-agent123}@rabbitmq:5672
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["agents", "full", "prod"]

  enneagram-agent:
    build:
      context: .
      dockerfile: docker/agents/enneagram.Dockerfile
    container_name: enneagram-agent
    ports:
      - "8003:8003"
    environment:
      - AGENT_ID=enneagram_agent_1
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-agent}:${RABBITMQ_PASS:-agent123}@rabbitmq:5672
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.75}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["agents", "full", "prod"]

  # Orchestration Service
  orchestrator:
    build:
      context: .
      dockerfile: docker/orchestrator.Dockerfile
    container_name: agent-orchestrator
    ports:
      - "8100:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-agent}:${RABBITMQ_PASS:-agent123}@rabbitmq:5672
      - AGENT_DISCOVERY_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./examples/chains:/app/chains:ro
    profiles: ["orchestration", "full", "prod"]

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring", "full", "prod"]

  grafana:
    image: grafana/grafana:latest
    container_name: agent-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    profiles: ["monitoring", "full", "prod"]

  # Development Tools
  locust:
    image: locustio/locust:latest
    container_name: agent-locust
    ports:
      - "8089:8089"
    volumes:
      - ./tests/load:/mnt/locust
    command: -f /mnt/locust/agent_load_test.py --host=http://agent-system:8000
    depends_on:
      - agent-system
    profiles: ["testing", "dev"]

  # Comprehensive Assessment System (Alternative deployment)
  comprehensive-assessment:
    build:
      context: .
      dockerfile: docker/comprehensive.Dockerfile
    container_name: comprehensive-assessment
    ports:
      - "8200:8000"
    environment:
      - COMPREHENSIVE_ASSESSMENT=true
      - ENABLE_TRANSLATION=true
      - ENABLE_INTERACTIVE_SESSIONS=true
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_CONCURRENT_ASSESSMENTS=${MAX_CONCURRENT_ASSESSMENTS:-10}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.75}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - models_cache:/app/models
      - assessment_cache:/app/cache
      - assessment_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      start_period: 120s
      retries: 3
    restart: unless-stopped
    profiles: ["comprehensive", "full"]

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  models_cache:
    driver: local
  assessment_cache:
    driver: local
  assessment_logs:
    driver: local

networks:
  default:
    name: agent-network
    driver: bridge

# Configuration Options:
# 
# 1. Minimal Mode (default):
#    docker-compose up
#    - Runs only the core agent-system service
#
# 2. Development Mode:
#    docker-compose --profile dev up
#    - Includes: agent-system, redis, locust (for testing)
#
# 3. Full Mode:
#    docker-compose --profile full up
#    - Includes: All services except locust
#
# 4. Production Mode:
#    docker-compose --profile prod up
#    - Includes: All production services with monitoring
#
# 5. Specific Components:
#    docker-compose --profile cache up      # Just Redis
#    docker-compose --profile monitoring up # Just monitoring stack
#    docker-compose --profile agents up     # Just agent services
#
# Environment Variables:
#    LOG_LEVEL: INFO, DEBUG, WARNING, ERROR
#    AGENT_MODE: production, development
#    RABBITMQ_USER: RabbitMQ username
#    RABBITMQ_PASS: RabbitMQ password
#    GRAFANA_PASSWORD: Grafana admin password
#    CONFIDENCE_THRESHOLD: Min confidence for assessments
#    MAX_CONCURRENT_ASSESSMENTS: Concurrent assessment limit